# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo  Destroy environments << parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name capstone-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name capstone-eks-cluster-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name cap-eks-nodegroup-<< parameters.workflow_id >>
            aws s3 rm s3://cap-cloudformation-artifacts-bucket-<< parameters.workflow_id >>  --recursive            


jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo

    steps:
      - checkout
      
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "/root/repo/blue-green/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-      
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd blue-green
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "/root/repo/blue-green/requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            cd blue-green
            make lint
  build:
    docker:
      - image: cimg/go:1.17
      
    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_cachine: true

      - run:
          name: Build Docker Image
          command: |
            cd blue-green
            docker build -t mada96/capstone_project:0.0_$CIRCLE_BRANCH .
            docker image ls

      - run:
          name: Push Docker Image
          command: |
            DOCKERPATH=mada96/capstone_project
            cd blue-green
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker image tag $DOCKERPATH:0.0_$CIRCLE_BRANCH $DOCKERPATH:$CIRCLE_BRANCH
            docker push $DOCKERPATH:$CIRCLE_BRANCH
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo        
    steps:
      - checkout
      - run:
          name: check if VPC infra already exists
          command: |
            aws cloudformation deploy \
             --template-file infra/infra-iac.yml \
             --stack-name capstone-$CIRCLE_BRANCH \
             --region $AWS_DEFAULT_REGION \
             --tags project=capstone
        #    # if test $(echo $(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE|grep -i creationtime>/dev/null;echo $?)) -eq 1 
        #    # then aws cloudformation create-stack \
        #    #   --stack-name capstone-$CIRCLE_BRANCH \
        #    #   --template-body file://infra/infra-iac.yml \
        #    #   --region $AWS_DEFAULT_REGION ;
        #    # fi;
      # - run:
      #     name: Ensure VPC infrastructure exists
      #     command: |
      #       aws cloudformation create-stack \
      #         --stack-name capstone-$CIRCLE_BRANCH \
      #         --template-body file://infra/infra-iac.yml \
      #         --region $AWS_DEFAULT_REGION 
          

# aws cloudformation create-stack \
#   --region region-code \
#   --stack-name my-eks-vpc-stack \
#   --template-url https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml
          #  aws cloudformation create-stack \
          #    --stack-name "capstone-${CIRCLE_WORKFLOW_ID:0:7}" \            
          #    --template-body infra/infra-iac.yml \              
          #    --parameters infra/iac-params.json \
          #    --tags project=capstone \
          #    --region=$AWS_DEFAULT_REGION              
      - destroy-environment:
          workflow_id: $CIRCLE_BRANCH    

  deploy-eks:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo        
    steps:
      - checkout              
      - run:
          name: Ensure eks-cluster infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file infra/eks-cluster.yml \
             --stack-name capstone-eks-cluster-$CIRCLE_BRANCH \
             --capabilities CAPABILITY_IAM \
             --region $AWS_DEFAULT_REGION \
             --no-fail-on-empty-changeset \
             --tags project=capstone          
          #  aws cloudformation deploy \
          #    --template-file infra/eks-cluster.yml \
          #    --stack-name capstone-eks-cluster-$CIRCLE_BRANCH \
          #    --s3-bucket cap-cloudformation-artifacts-bucket  \ 
          #    --no-fail-on-empty-changeset \
          #    --tags Name=CapKubernetesCluster-$CIRCLE_BRANCH
          #  aws cloudformation deploy \
          #    --template-file infra/eks-cluster.yml \
          #    --tags project=capstone \
          #    --stack-name "capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
          #    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      # - destroy-environment:
      #     workflow_id: $CIRCLE_BRANCH         

  check-eks-working:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo        
    steps:
      - checkout          
      - run:
          name: Make sure eks is working
          command: |
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION  --name Capstone-Cluster
      # - destroy-environment:
      #     workflow_id: $CIRCLE_BRANCH
          
  deploy-eks-addon-and-nodegroup:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo        
    steps:
      - checkout          
      - run:
          name: Ensure eks-addon and NodeGroup infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file infra/nodegroup.yml \
             --stack-name cap-eks-nodegroup-$CIRCLE_BRANCH \
             --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
             --region $AWS_DEFAULT_REGION \
             --no-fail-on-empty-changeset \
             --tags Name=eks_worker_nodes_$CIRCLE_BRANCH
          #  aws cloudformation deploy \
          #    --template-file infra/nodegroup.yaml \
          #    --stack-name cap-eks-nodegroup-$CIRCLE_BRANCH \
          #    --capabilities CAPABILITY_NAMED_IAM \
          #    --no-fail-on-empty-changeset \
          #    --tags Name=eks_worker_nodes_$CIRCLE_BRANCH
      # - destroy-environment:
      #     workflow_id: $CIRCLE_BRANCH
 
workflows:
  default:
    jobs:
      - lint:
          filters:
            branches:
              only: [blue, green]
      - build:
          requires: [lint]
          filters:
            branches:
              only: [blue, green] 
      - deploy-infrastructure:
          filters:
            branches:
              only: [blue, green]
      - deploy-eks:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [blue, green]                     
      - check-eks-working:
          requires: [deploy-eks]
          filters:
            branches:
              only: [blue, green]       
      - deploy-eks-addon-and-nodegroup:
          requires: [deploy-eks]
          filters:
            branches:
              only: [blue, green]       