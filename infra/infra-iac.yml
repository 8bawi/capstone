Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
    EnvironmentName:
        Description: The Name of the Env
        Type: String
        Default: CapstoneProject

    VpcCIDR:
        Description: The CIDR of the VPC
        Type: String
        Default: 10.0.0.0/16        
    
    PublicSub1:
        Description: The CIDR of the 1st PublicSubnet
        Type: String
        Default: 10.0.1.0/24        

    PublicSub2:
        Description: The CIDR of the 1st PublicSubnet
        Type: String
        Default: 10.0.3.0/24     
    
    PrivateSub1:
        Description: The CIDR of the 1st PublicSubnet
        Type: String
        Default: 10.0.2.0/24                

    PrivateSub2:
        Description: The CIDR of the 1st PublicSubnet
        Type: String
        Default: 10.0.4.0/24        

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSub1
          - PublicSub2
          - PrivateSub1
          - PrivateSub2

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock:  !Ref "VpcCIDR"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value:  !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-GW

    VPCGatewayAttach:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId:  !Ref VPC
            InternetGatewayId:  !Ref  InternetGateway

    PublicSubnet1Structure:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:  !Ref  VPC
            CidrBlock:  !Ref  PublicSub1
            AvailabilityZone: !Select [ 0,  !GetAZs '']
            MapPublicIpOnLaunch:    true
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-pub1
                - Key: kubernetes.io/role/elb
                  Value: 1                  

    PublicSubnet2Structure:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:  !Ref  VPC
            CidrBlock:  !Ref  PublicSub2
            AvailabilityZone: !Select [ 1,  !GetAZs '']
            MapPublicIpOnLaunch:    true
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-pub2
                - Key: kubernetes.io/role/elb
                  Value: 1                  

    PrivateSubnet1Structure:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:  !Ref  VPC
            CidrBlock:  !Ref  PrivateSub1
            AvailabilityZone: !Select [ 0,  !GetAZs '']
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-pri1
                - Key: kubernetes.io/role/internal-elb
                  Value: 1                    

    PrivateSubnet2Structure:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:  !Ref  VPC
            CidrBlock:  !Ref  PrivateSub2
            AvailabilityZone: !Select [ 1,  !GetAZs '']
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-pri2
                - Key: kubernetes.io/role/internal-elb
                  Value: 1                    
    
    Nat1EIP:
        Type: AWS::EC2::EIP
        DependsOn:  VPCGatewayAttach
        Properties:
            Domain: vpc

    Nat2EIP:
        Type: AWS::EC2::EIP
        DependsOn:  VPCGatewayAttach
        Properties:
            Domain: vpc

    NatGw1:
        DependsOn:
        - Nat1EIP
        - PublicSubnet1Structure
        - VPCGatewayAttach
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt Nat1EIP.AllocationId
            SubnetId: !Ref  PublicSubnet1Structure
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-Nat1

    NatGw2:
        DependsOn:
        - Nat2EIP
        - PublicSubnet2Structure
        - VPCGatewayAttach    
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt Nat2EIP.AllocationId
            SubnetId: !Ref  PublicSubnet2Structure
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-Nat2

    PubRtTb:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:  !Ref  VPC
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-PubTb

    PubRoute:
        Type: AWS::EC2::Route
        DependsOn:  VPCGatewayAttach
        Properties:
            RouteTableId: !Ref  PubRtTb
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:  !Ref  InternetGateway

    PubSub1TbAssociation:
            Type:   AWS::EC2::SubnetRouteTableAssociation
            Properties:
                    RouteTableId:   !Ref PubRtTb
                    SubnetId:   !Ref PublicSubnet1Structure

    PubSub2TbAssociation:
            Type:   AWS::EC2::SubnetRouteTableAssociation
            Properties:
                    RouteTableId:   !Ref PubRtTb
                    SubnetId:   !Ref PublicSubnet2Structure                    

    PriRtTb1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:  !Ref  VPC
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-PriTb1

    PriRtTb2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:  !Ref  VPC
            Tags:
                - Key:  Name
                  Value:  !Sub ${EnvironmentName}-PriTb2

    PriRoute1:
        DependsOn:
        - VPCGatewayAttach
        - NatGw1    
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref  PriRtTb1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref  NatGw1

    PriRoute2:
        DependsOn:
        - VPCGatewayAttach
        - NatGw2
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref  PriRtTb2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref  NatGw2              

    PriSub1TbAssociation:
            Type:   AWS::EC2::SubnetRouteTableAssociation
            Properties:
                    RouteTableId:   !Ref PriRtTb1
                    SubnetId:   !Ref PrivateSubnet1Structure

    PriSub2TbAssociation:
            Type:   AWS::EC2::SubnetRouteTableAssociation
            Properties:
                    RouteTableId:   !Ref PriRtTb2
                    SubnetId:   !Ref PrivateSubnet2Structure                                        
    
    ControlPlaneSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Cluster communication with worker nodes
            VpcId: !Ref VPC
    # ProfileWithRolesForOurApp:
    #   Type: AWS::IAM::InstanceProfile
    #   Properties: 
    #     Roles:
    #       - UdacityS3ReadOnlyEC2
Outputs: 

    VpcIDVar:
        Description:  The ID of the VPC
        Value:  !Ref  VPC
        Export: 
            Name: 
                'Fn::Sub': '${AWS::StackName}-VPCID'
    
    PubSub1ID:
        Description:  The ID of the 1st Public Subnet
        Value: !Ref PublicSubnet1Structure
        Export: 
            Name:
                'Fn::Sub': '${AWS::StackName}-PubSub1Id'

    PubSub2ID:
        Description:  The ID of the 2nd Public Subnet
        Value: !Ref PublicSubnet2Structure
        Export:
            Name: 
                'Fn::Sub': '${AWS::StackName}-PubSub2Id'

    PriSub1ID:
        Description:  The ID of the 1st Private Subnet
        Value: !Ref PrivateSubnet1Structure
        Export: 
            Name: 
                'Fn::Sub': '${AWS::StackName}-PriSub1Id'

    PriSub2ID:
        Description:  The ID of the 2nd Private Subnet
        Value: !Ref PrivateSubnet2Structure
        Export: 
            Name:
                'Fn::Sub': '${AWS::StackName}-PriSub2Id'
            
    SecurityGroups:
        Description: Security group for the cluster control plane communication with worker nodes
        Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
# Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
